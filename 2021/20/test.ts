import { assertEquals } from "https://deno.land/std/testing/asserts.ts";

import {Input} from "../../utils/deno/input.ts";
import { parseInput, solvePart1, solvePart2} from "./solutions.ts";

Deno.test("part 1 - constructed test case", () => {
  const input = `

.#
#.`;
  const count = solvePart1(parseInput(new Input(input)));
  assertEquals(count, 14);
});

Deno.test("part 1 - constructed test case", () => {
  const input = `

.#.
#..
.##`;
  const count = solvePart1(parseInput(new Input(input)));
  assertEquals(count, 21);
});

Deno.test("part 1 - constructed test case", () => {
  const input = `

.#
##`;
  const count = solvePart1(parseInput(new Input(input)));
  assertEquals(count, 18);
});

Deno.test("part 2 - constructed test case", () => {
  const input = `

.#.
#..
.##`;
  const count = solvePart2(parseInput(new Input(input)));
  assertEquals(count, 4658);
});
